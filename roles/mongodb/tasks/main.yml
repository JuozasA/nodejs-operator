---
# tasks file for nodeapp
- name: Create MongoDB Secret
  k8s:
    definition:
      kind: Secret
      apiVersion: v1
      metadata: 
        name: '{{meta.name}}'   
        namespace: '{{meta.namespace}}'
      stringData: 
        database-password: '{{dbpassword | string | b64encode}}'
        database-admin-password : '{{dbadminpasswd | string | b64encode}}'

- name: Create MongoDB Service
  k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata: 
        name: '{{meta.name}}'
        namespace: '{{meta.namespace}}'
        annotations: 
          description: 'Exposes the database server'
        labels:
          app: '{{meta.name}}'
      spec:
        ports:
          - name: mongodb
            port: 27017
            targetPort: 27017
        selector: 
          app: '{{meta.name}}'

- name: Create headless MongoDB Service
  k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: '{{meta.name}}-internal'
        namespace: '{{meta.namespace}}'
        labels:
          app: '{{meta.name}}'
        annotations:
          service.alpha.kubernetes.io/tolerate-unready-endpoints: 'true'
      spec:
        clusterIP: None
        ports:
          - name: mongodb
            port: 27017
        selector:
          app: '{{meta.name}}'


- name: Create MongoDB StatefulSet
  k8s:
    definition:
      kind: StatefulSet
      apiVersion: apps/v1
      metadata: 
        name: '{{meta.name}}'
        namespace: '{{meta.namespace}}'
        annotations: 
          description: 'Defines how to deploy the database'
          template.alpha.openshift.io/wait-for-ready: 'true'
      spec: 
        replicas: '{{size}}'
        serviceName: '{{meta.name}}-internal'
        selector: 
          matchLabels:
            app: '{{meta.name}}'
        template: 
          metadata: 
            name: '{{meta.name}}'
            labels: 
              app: '{{meta.name}}'
          spec: 
            containers: 
              - name: mongodb
                image: '{{image}}'
                ports: 
                  - containerPort: 27017
                args:
                  - 'run-mongod-replication'
                env: 
                  - name: MONGODB_USER
                    value: '{{dbuser}}'
                  - name: MONGODB_PASSWORD
                    valueFrom:
                      secretKeyRef :
                        name : '{{meta.name}}'
                        key : database-password
                  - name: MONGODB_DATABASE
                    value: '{{dbname}}'
                  - name: MONGODB_ADMIN_PASSWORD
                    valueFrom: 
                      secretKeyRef:
                        name: '{{meta.name}}'
                        key: database-admin-password
                  - name: MONGODB_REPLICA_NAME
                    value: 'rs0'
                  - name: MONGODB_KEYFILE_VALUE
                    value: '12345678901234567890'
                  - name: MONGODB_SERVICE_NAME
                    value: '{{meta.name}}-internal'
                readinessProbe: 
                  timeoutSeconds: 1
                  initialDelaySeconds: 3
                  exec: 
                    command: 
                      - stat
                      - /tmp/initialized
                livenessProbe: 
                  timeoutSeconds: 1
                  initialDelaySeconds: 30
                  tcpSocket: 
                    port: 27017
                resources: 
                  limits: 
                    memory: 500Mi
                volumeMounts:
                  - name: '{{meta.name}}-data'
                    mountPath: /var/lib/mongodb/data
            imagePullSecrets:
              - name: '{{regsecret}}'
        volumeClaimTemplates:
        - metadata:
            name: '{{meta.name}}-data'
          spec:
            accessModes: [ "ReadWriteOnce" ]
            storageClassName: "gp2"
            resources:
              requests:
                storage: 1Gi
  
